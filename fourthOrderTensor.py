
import numpy as np

def FourthOrderTensor(  x0000,  x0001,  x0002,
                        x0010,  x0011,  x0012,
                        x0020,  x0021,  x0022,
                        x0100,  x0101,  x0102,
                        x0110,  x0111,  x0112,
                        x0120,  x0121,  x0122,
                        x0200,  x0201,  x0202,
                        x0210,  x0211,  x0212,
                        x0220,  x0221,  x0222,
                        x1000,  x1001,  x1002,
                        x1010,  x1011,  x1012,
                        x1020,  x1021,  x1022,
                        x1100,  x1101,  x1102,
                        x1110,  x1111,  x1112,
                        x1120,  x1121,  x1122,
                        x1200,  x1201,  x1202,
                        x1210,  x1211,  x1212,
                        x1220,  x1221,  x1222,
                        x2000,  x2001,  x2002,
                        x2010,  x2011,  x2012,
                        x2020,  x2021,  x2022,
                        x2100,  x2101,  x2102,
                        x2110,  x2111,  x2112,
                        x2120,  x2121,  x2122,
                        x2200,  x2201,  x2202,
                        x2210,  x2211,  x2212,
                        x2220, x2221, x2222):

                        data = np.zeros((3,3,3,3))

                        data[0][0][0][0] = x0000 ; data[0][0][0][1]= x0001 ; data[0][0][0][2] = x0002 ;
                        data[0][0][1][0] = x0010 ; data[0][0][1][1]= x0011 ; data[0][0][1][2] = x0012 ;
                        data[0][0][2][0] = x0020 ; data[0][0][2][1]= x0021 ; data[0][0][2][2] = x0022 ;
                        data[0][1][0][0] = x0100 ; data[0][1][0][1]= x0101 ; data[0][1][0][2] = x0102 ;
                        data[0][1][1][0] = x0110 ; data[0][1][1][1]= x0111 ; data[0][1][1][2] = x0112 ;
                        data[0][1][2][0] = x0120 ; data[0][1][2][1]= x0121 ; data[0][1][2][2] = x0122 ;
                        data[0][2][0][0] = x0200 ; data[0][2][0][1]= x0201 ; data[0][2][0][2] = x0202 ;
                        data[0][2][1][0] = x0210 ; data[0][2][1][1]= x0211 ; data[0][2][1][2] = x0212 ;
                        data[0][2][2][0] = x0220 ; data[0][2][2][1]= x0221 ; data[0][2][2][2] = x0222 ;
                        data[1][0][0][0] = x1000 ; data[1][0][0][1]= x1001 ; data[1][0][0][2] = x1002 ;
                        data[1][0][1][0] = x1010 ; data[1][0][1][1]= x1011 ; data[1][0][1][2] = x1012 ;
                        data[1][0][2][0] = x1020 ; data[1][0][2][1]= x1021 ; data[1][0][2][2] = x1022 ;
                        data[1][1][0][0] = x1100 ; data[1][1][0][1]= x1101 ; data[1][1][0][2] = x1102 ;
                        data[1][1][1][0] = x1110 ; data[1][1][1][1]= x1111 ; data[1][1][1][2] = x1112 ;
                        data[1][1][2][0] = x1120 ; data[1][1][2][1]= x1121 ; data[1][1][2][2] = x1122 ;
                        data[1][2][0][0] = x1200 ; data[1][2][0][1]= x1201 ; data[1][2][0][2] = x1202 ;
                        data[1][2][1][0] = x1210 ; data[1][2][1][1]= x1211 ; data[1][2][1][2] = x1212 ;
                        data[1][2][2][0] = x1220 ; data[1][2][2][1]= x1221 ; data[1][2][2][2] = x1222 ;
                        data[2][0][0][0] = x2000 ; data[2][0][0][1]= x2001 ; data[2][0][0][2] = x2002 ;
                        data[2][0][1][0] = x2010 ; data[2][0][1][1]= x2011 ; data[2][0][1][2] = x2012 ;
                        data[2][0][2][0] = x2020 ; data[2][0][2][1]= x2021 ; data[2][0][2][2] = x2022 ;
                        data[2][1][0][0] = x2100 ; data[2][1][0][1]= x2101 ; data[2][1][0][2] = x2102 ;
                        data[2][1][1][0] = x2110 ; data[2][1][1][1]= x2111 ; data[2][1][1][2] = x2112 ;
                        data[2][1][2][0] = x2120 ; data[2][1][2][1]= x2121 ; data[2][1][2][2] = x2122 ;
                        data[2][2][0][0] = x2200 ; data[2][2][0][1]= x2201 ; data[2][2][0][2] = x2202 ;
                        data[2][2][1][0] = x2210 ; data[2][2][1][1]= x2211 ; data[2][2][1][2] = x2212 ;
                        data[2][2][2][0] = x2220; data[2][2][2][1] = x2221; data[2][2][2][2] = x2222;
                        
                        return data

def ElastTensor(C11, C12, C13, C33, C44, C66):
    # construct 6x6 representation

    # note that the FemLib ColTensor convention is 
    # {eps_xx, eps_yy, eps_zz, 2*eps_xy, 2*eps_yz, 2*eps_zx}
    # so eps_xy is in the fourth position whereas it's in the sixth
    # position in the formulation
    # so, put C66 in the correct place below
                
    C = np.array([
    [C11, C12, C13, 0.0, 0.0, 0.0],
    [C12, C11, C13, 0.0, 0.0, 0.0],
    [C13, C13, C33, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, C66, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0, C44, 0.0],
    [0.0, 0.0, 0.0, 0.0, 0.0, C44]
    ]) 
                                
    # convert to full fourth-order tensor
            
    elastTensor = FourthOrderTensor(C[0][0], C[0][3], C[0][5], C[0][3], C[0][1], C[0][4], C[0][5], C[0][4], C[0][2],
                                    C[3][0], C[3][3], C[3][5], C[3][3], C[3][1], C[3][4], C[3][5], C[3][4], C[3][2],
                                    C[5][0], C[5][3], C[5][5], C[5][3], C[5][1], C[5][4], C[5][5], C[5][4], C[5][2],
                                    C[3][0], C[3][3], C[3][5], C[3][3], C[3][1], C[3][4], C[3][5], C[3][4], C[3][2],
                                    C[1][0], C[1][3], C[1][5], C[1][3], C[1][1], C[1][4], C[1][5], C[1][4], C[1][2],
                                    C[4][0], C[4][3], C[4][5], C[4][3], C[4][1], C[4][4], C[4][5], C[4][4], C[4][2],
                                    C[5][0], C[5][3], C[5][5], C[5][3], C[5][1], C[5][4], C[5][5], C[5][4], C[5][2],
                                    C[4][0], C[4][3], C[4][5], C[4][3], C[4][1], C[4][4], C[4][5], C[4][4], C[4][2],
                                    C[2][0], C[2][3], C[2][5], C[2][3], C[2][1], C[2][4], C[2][5], C[2][4], C[2][2])
    return elastTensor
